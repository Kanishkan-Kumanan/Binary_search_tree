Data_Structures(Binary-Search-Tree)

class User:
    def __init__(self,username,name,email):
        self.username = username
        self.name = name
        self.email = email
    def __repr__(self):
        return "User('{}'/'{}'', '{}')".format(self.name,self.username,self.email)
        
kanish= User("kanish","kanishkan","kanish@gmail.com")
jaga= User("jaga","jagdesh","jag@gmail.com")
hemz= User("hemz","hemanth","hem@gmail.com")
sachin= User("sachin","sachinbritto","sach@gmail.com")
mani= User("mani","manivig","mani@gmail.com")
arun= User("arun","arunraj","arun@gmail.com")
mohan= User("mohan","mohanraj","mohan@gmail.com")
nishant= User("nishant","nishanthv","nish@gmail.com")
blesson= User("blesson","blessonraam","blessr@gmail.com")

users=[kanish,jaga,hemz,sachin,mani,arun,mohan,nishant,blesson]
class UserDatabase:
    def __init__(self):
        self.users =[]
    def insert(self,user):
        i = 0
        while i < len(self.users):
            if self.users[i].username > user.username:
                break
            i+=1
        self.users.insert(i,user)
    
    def find(self,username):
        for user in users:
            if user.username == username:
                return user
   
    def update(self,user):
        target = self.find(user.username)
        target.username,target.email = user.username,user.email
    
    def list_all(self):
        return self.users

database = UserDatabase()
database.insert(hemz)
database.insert(kanish)
database.insert(jaga)
database.insert(mani)
database.insert(arun)

class TreeNode:
    def __init__(self,key):
        self.key = key
        self.left = None
        self.right = None
        
node0 = TreeNode(3)
node1 = TreeNode(4)
node2 = TreeNode(5)
node0.left = node1
node0.right = node2
tree = node0

tree_tuple =((1,3,None),2,((None,3,4),5,(6,7,8)))
def parse_tuple(data):
    if isinstance(data,tuple) and len(data) == 3:
        node = TreeNode(data[1])
        node.left = parse_tuple(data[0])
        node.right = parse_tuple(data[2])
    elif data is None:
        node = None
    else:
        node = TreeNode(data)
    return node
tree2 = parse_tuple(((1,3,None), 2, ((None, 3, 4), 5, (6, 7, 8))))


def display_keys(node,space='\t',level=0):
    if node is None:
        print(space*level + '?')
        return
    if node.left is None and node.right is None:
        print(space*level + str(node.key))
        return
    display_keys(node.right,space,level+1)
    print(space*level + str(node.key))
    display_keys(node.left,space,level+1)
    
l = display_keys(tree2,' ')
def traverse_in_order(node):
    if node is None:
        return []
    else:
        return(traverse_in_order(node.left) + [node.key] + traverse_in_order(node.right))
        
'''m = traverse_in_order(tree2)''' 
def traverse_pre_order(node):
    if node is None:
        return []
    else:
        return([node.key] + traverse_pre_order(node.left) + traverse_pre_order(node.right))
        
def traverse_post_order(node):
    if node is None:
        return []
    else:
        return(traverse_post_order(node.left) + traverse_post_order(node.right) + [node.key])         
        
e = traverse_pre_order(tree2)
q = traverse_post_order(tree2)

def tree_height(node):
    if node is None:
        return 0
    return 1 + max(tree_height(node.left),tree_height(node.right))
t = tree_height(tree2)

def number_nodes(node):
    if node is None:
        return 0
    return 1 + number_nodes(node.left) + number_nodes(node.right)
f = number_nodes(tree2)

def tree_nodes(nums):
    return[x for x in nums if x is not None]
def is_bst(node):
    if node is None:
        return True, None,None
    is_bst_l,min_l,max_l = is_bst(node.left)
    is_bst_r,min_r,max_r = is_bst(node.right)
    
    is_bst_node = (is_bst_l and is_bst_r and(max_l is None or max_l < node.key) and (min_r is None or min_r > node.key))
    
    min_key = min(tree_nodes([min_l,node.key,min_r]))
    max_key = max(tree_nodes([max_l,node.key,max_r]))
    
    return is_bst_node, min_key, max_key
    
h = is_bst(tree2)
class BSTnode:
    def __init__(self,key,value=None):
        self.key = key
        self.value = value
        self.left = None
        self.right = None
        self.parent = None
tree = BSTnode(kanish.username,kanish)
tree.left = BSTnode(hemz.username,hemz)
tree.right = BSTnode(mohan.username,mohan)
tree.left.left = BSTnode(blesson.username,blesson)
tree.left.right = BSTnode(jaga.username,jaga)
tree.right.left = BSTnode(mani.username,mani)
tree.right.right = BSTnode(nishant.username,nishant)

b = display_keys(tree)

def insert_node(node,key,value):
    if node is None:
        node = BSTnode(key,value)
    elif key < node.key:
        node.left = insert_node(node.left,key,value)
        node.left.parent = node
    elif key > node.key:
        node.right = insert_node(node.right,key,value)
        node.right.parent = node
    return node
    
insert_node(tree,sachin.username,sachin)
insert_node(tree,arun.username,arun)
o = display_keys(tree)
def find(node,key):
    if node is None:
        return None
    if key == node.key:
        return node
    if key < node.key:
        return find(node.left,key)
    if key > node.key:
        return find(node.right,key)


def update(node,key,value):
    target = find(node,key)
    if target is not None:
        target.value = value
v = update(tree,"mani",User("mani","manivignesh","mani@gmail.com")) 
u = find(tree,"mani")

def list_nodes(node):
    if node is None:
        return []
    return list_nodes(node.left) + [(node.key,node.value)] + list_nodes(node.right)    
p = list_nodes(tree)
def balanced_bst(node):
    if node is None:
        return True, 0
    balanced_l,height_l = balanced_bst(node.left)
    balanced_r,height_r = balanced_bst(node.right)
    balanced = balanced_l and balanced_r and abs(height_l - height_r) <= 1
    height = 1 + max(height_l,height_r)
    return balanced, height

w = balanced_bst(tree)
print("Hello")

def make_balanced_bst(data,lo=0,hi=None,parent=None):
    if hi is None:
        hi = len(data) - 1
    if lo > hi:
        return None
    mid = (lo + hi) // 2
    
    key,value = data[mid]
    
    root = BSTnode(key,value)
    root.parent = parent
    root.left = make_balanced_bst(data,lo,mid-1,root)
    root.right = make_balanced_bst(data,mid+1,hi,root)
    
    return root

   
data = [(user.username,user) for user in users]
tree = make_balanced_bst(data)
z = display_keys(tree)
print("ka")
def balanced_BST(node):
    return make_balanced_bst(list_nodes(node))
tree3 = None    
for user in users:
    tree3 = insert_node(tree3,user.username,user)
i = display_keys(tree3)

tree4 = balanced_BST(tree3)
j = display_keys(tree4)

class TreeMap():
    def __init__(self):
        self.root = None
    def __setitem__(self,key,value):
        node = find(self.root,key)
        if not node:
            self.root = insert_node(self.root,key,value)
            self.root = balanced_BST(self.root)
        else:
            update(self.root,key,value)
    def __getitem__(self,key):
        node = find(self.root,key)
        return node.value if node else None
    def __iter__(self):
        return (x for x in list_nodes(self.root))
    def __len__(self):
        return tree_height(self.root)
    def display(self):
        return display_keys(self.root)

print("Hi")        
treemap = TreeMap()
treemap['kanish'] = kanish
treemap['jaga'] = jaga
treemap['hemz'] = hemz
treemap['arun'] = arun
treemap['sachin'] = sachin
treemap['mani'] = mani
treemap['mohan'] = mohan
treemap['nishant'] = nishant
    
    
